<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: Messenger/SendMessageStatusResponse.proto

namespace SendMessageStatusResponse;

use UnexpectedValueException;

/**
 * Protobuf type <code>SendMessageStatusResponse.Status</code>
 */
class Status
{
    /**
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * Generated from protobuf enum <code>INVALID_NICKNAME = 1;</code>
     */
    const INVALID_NICKNAME = 1;
    /**
     * Generated from protobuf enum <code>IS_MODERATOR = 2;</code>
     */
    const IS_MODERATOR = 2;
    /**
     * Generated from protobuf enum <code>POSTBOX_IS_FULL = 3;</code>
     */
    const POSTBOX_IS_FULL = 3;
    /**
     * Generated from protobuf enum <code>FILTERED = 4;</code>
     */
    const FILTERED = 4;
    /**
     * Generated from protobuf enum <code>FAILED = 5;</code>
     */
    const FAILED = 5;
    /**
     * Generated from protobuf enum <code>FORWARD_OK = 6;</code>
     */
    const FORWARD_OK = 6;

    private static $valueToName = [
        self::OK => 'OK',
        self::INVALID_NICKNAME => 'INVALID_NICKNAME',
        self::IS_MODERATOR => 'IS_MODERATOR',
        self::POSTBOX_IS_FULL => 'POSTBOX_IS_FULL',
        self::FILTERED => 'FILTERED',
        self::FAILED => 'FAILED',
        self::FORWARD_OK => 'FORWARD_OK',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Status::class, \SendMessageStatusResponse_Status::class);

