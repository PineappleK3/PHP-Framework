<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: CheckFlag.proto

namespace CheckFlag\FlagCheckResponse;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\Internal\GPBWrapperUtils;

/**
 * Generated from protobuf message <code>CheckFlag.FlagCheckResponse.Result</code>
 */
class Result extends \Google\Protobuf\Internal\Message
{
    /**
     * Generated from protobuf field <code>int32 flag = 1;</code>
     */
    private $flag = 0;
    /**
     * Generated from protobuf field <code>bool passed = 2;</code>
     */
    private $passed = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $flag
     *     @type bool $passed
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\CheckFlag::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>int32 flag = 1;</code>
     * @return int
     */
    public function getFlag()
    {
        return $this->flag;
    }

    /**
     * Generated from protobuf field <code>int32 flag = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setFlag($var)
    {
        GPBUtil::checkInt32($var);
        $this->flag = $var;

        return $this;
    }

    /**
     * Generated from protobuf field <code>bool passed = 2;</code>
     * @return bool
     */
    public function getPassed()
    {
        return $this->passed;
    }

    /**
     * Generated from protobuf field <code>bool passed = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setPassed($var)
    {
        GPBUtil::checkBool($var);
        $this->passed = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Result::class, \CheckFlag_FlagCheckResponse_Result::class);

