<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: UserData/IgnoreListUpdate.proto

namespace IgnoreListUpdate;

use UnexpectedValueException;

/**
 * Protobuf type <code>IgnoreListUpdate.Action</code>
 */
class Action
{
    /**
     * Generated from protobuf enum <code>ADD_IGNORE = 0;</code>
     */
    const ADD_IGNORE = 0;
    /**
     * Generated from protobuf enum <code>REMOVE_IGNORE = 1;</code>
     */
    const REMOVE_IGNORE = 1;
    /**
     * Generated from protobuf enum <code>ADD_BLOCK = 2;</code>
     */
    const ADD_BLOCK = 2;
    /**
     * Generated from protobuf enum <code>REMOVE_BLOCK = 3;</code>
     */
    const REMOVE_BLOCK = 3;
    /**
     * Generated from protobuf enum <code>ADD_PRIVATE_IGNORE = 4;</code>
     */
    const ADD_PRIVATE_IGNORE = 4;
    /**
     * Generated from protobuf enum <code>REMOVE_PRIVATE_IGNORE = 5;</code>
     */
    const REMOVE_PRIVATE_IGNORE = 5;

    private static $valueToName = [
        self::ADD_IGNORE => 'ADD_IGNORE',
        self::REMOVE_IGNORE => 'REMOVE_IGNORE',
        self::ADD_BLOCK => 'ADD_BLOCK',
        self::REMOVE_BLOCK => 'REMOVE_BLOCK',
        self::ADD_PRIVATE_IGNORE => 'ADD_PRIVATE_IGNORE',
        self::REMOVE_PRIVATE_IGNORE => 'REMOVE_PRIVATE_IGNORE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Action::class, \IgnoreListUpdate_Action::class);

